/**
 * @file in_robot.oil
 *
 * @section desc File description
 *
 * @section copyright Copyright
 *
 * Trampoline is copyright (c) IRCCyN 2005-2007
 * Trampoline is protected by the French intellectual property law.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; version 2
 * of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * @section infos File informations
 *
 * $Date$
 * $Rev$
 * $Author$
 * $URL$
 */

OIL_VERSION = "2.5" : "test" ;

IMPLEMENTATION trampoline {
    TASK {
        UINT32 STACKSIZE = 500 ;
        UINT32 PRIORITY = 1 ;
    } ;
    ISR {
        UINT32 STACKSIZE = 500 ;
    } ;
};

CPU test {
    OS config {
        STATUS = EXTENDED;
        STARTUPHOOK = TRUE;
        SHUTDOWNHOOK = TRUE;
        APP_SRC = "in_robot.c"; 
        APP_NAME = "in_robot_exe";
        TRAMPOLINE_BASE_PATH = "/infres/s3/trobert/tool/lego/trampoline2beta";
        CFLAGS = "-g -c -ffreestanding -fsigned-char -mcpu=arm7tdmi -Os -Winline -Wall -Werror-implicit-function-declaration --param max-inline-insns-single=1000 -ffunction-sections -fdata-sections -std=gnu99"; //-MD ";
        ASFLAGS = "-g -mcpu=arm7tdmi-s --fatal-warnings ";
        LDFLAGS = "-g --cref --allow-multiple-definition --gc-sections";
        LDFLAGS = "-lm -L/infres/s3/trobert/tool/lego/arm-elf/lib -lgcc -L /infres/s3/trobert/tool/lego/lib/gcc/arm-elf/4.4.4 -lc";
        SYSTEM_CALL = TRUE;
        
        COMPILER = "arm-elf-gcc";
        ASSEMBLER = "arm-elf-as";
        LINKER = "arm-elf-ld";
        MEMMAP = TRUE{
          COMPILER = gcc;
          LINKER = gnu_ld { SCRIPT = "script.ld"; };
          ASSEMBLER = gnu_as;
          MEMORY_PROTECTION = FALSE;
        };
    } ;

    APPMODE std {
    };

    RESOURCE Robot_state {
	RESOURCEPROPERTY = STANDARD;
    };

    RESOURCE Speed {
	RESOURCEPROPERTY = STANDARD;
    };

    TASK run {
       PRIORITY = 2;
       AUTOSTART = FALSE;
       ACTIVATION = 1;
       SCHEDULE = FULL;		
		
	USRSTACKSIZE = 512;  
	SYSSTACKSIZE = 128;

	RESOURCE = Robot_state;
	RESOURCE = Speed;
    };   
    
    TASK changeStatus {
       PRIORITY = 3;
       AUTOSTART = FALSE;
       ACTIVATION = 1;
       SCHEDULE = FULL;		
		
	USRSTACKSIZE = 512;  
	SYSSTACKSIZE = 128;
    };     
   
   
    COUNTER SystemCounter {
       SOURCE = it_timer1;
       MAXALLOWEDVALUE = 2000;
       TICKSPERBASE = 1;
       MINCYCLE = 1; //rappel 1 tcik 1 ms => tick per base ==10 => le compteur augmente toutes les 10 ms  
    };
	
	ALARM Alarm1{
		COUNTER = SystemCounter;
		ACTION = ACTIVATETASK {
		     TASK = run;
		};
        AUTOSTART = TRUE {
            ALARMTIME = 50;
            CYCLETIME = 50; //10*10 =100 ms.
            APPMODE = std;
		};
	};

	ALARM Alarm2{
		COUNTER = SystemCounter;
		ACTION = ACTIVATETASK {
	        TASK = changeStatus;
		};
        AUTOSTART = TRUE {
            ALARMTIME = 30;
            CYCLETIME = 30; //5*10 =500 ms.
            APPMODE = std;
		};
	};
/*******  ISR  ********/
ISR isr_button_stop {
	CATEGORY = 2;
	PRIORITY = 1;
	SOURCE = button_stop;
};

/*
   ISR isr_sensor_light {
       CATEGORY = 2;
		PRIORITY = 1;
		SOURCE = light;
   };
   ISR isr_sensor_sonar {
       CATEGORY = 2;
		PRIORITY = 1;
		SOURCE = it_bluetooth;
   };

	
*/

};

/* End of file in_robot.oil */
